1- Desenvolver algoritmo.
2- artigo no medium.
	- Mínimo de oito 8 minutos de leitura.
	- Adicionar # tralhas para o artigo (hastags).
    Deve ter:
	- Introdução
		algoritmos
		eficiência
		ordenação
	- metodologia
		1 - Cada matriz gerada deve ter o algoritmo
		executado 4 vezes. O tempo gasto é a média
		do tempo gasto pelas 4 execuções em uma
		mesma matriz.
		( tempoA + tempoB + tempoC + tempoD ) / 4

		2 - As matrizes de números para a primeira obtenção de dados
		são geradas aleatoriamente com base em seed do unix timestamp.
		Seus tamanhos são:
		32 64 128 256 512 1024 2048

		3 - Considerando que os algoritmos executam
		ordencação crescente. Criar matrizes ordenadas de forma
		decrescente (pior caso para um algoritmo que ordena para
		crescente).
		Considerar os números de elementos descritos em 2 e adotar
		a média descrita em 1.

		4 - os algoritmos não podem ter:
			A - funções externas.
			B - funções de output ou input como scanf() ou printf()
		Em outras palavras: apenas o algoritmo puro em sua função.
		
		5 - A unidade de tempo adotada para avaliação e o milisegundo.

		6 - opção -O0 do compilador g++ ativada para desativar otimizações.
		
	- resultados
		Gráficos com as seguintes grandezas:
			- Tamanho do input.
			- Média de tempo de 4 execuções por matriz.
		comparação descrita entre algoritmos
	- conclusões
		A importância de avaliar a eficiência e algoritmos
		e suas aplicações no desenvolvimento de software.
	- referências
		sites
		livros
		artigos ...
3- publicação no likedin.
4- link para publicação no linkedin do teu artigo no Medium.
_______________________________________________________________
Ordenação bolha
--------------------------------------------------------------------------------------------
0 ←Tempo de Execução em Milisegundos; Tamanho do array: 32 elementos de 1 até: 1000
0 ←Tempo de Execução em Milisegundos; Tamanho do array: 64 elementos de 1 até: 1000
0 ←Tempo de Execução em Milisegundos; Tamanho do array: 128 elementos de 1 até: 1000
0 ←Tempo de Execução em Milisegundos; Tamanho do array: 256 elementos de 1 até: 1000
2 ←Tempo de Execução em Milisegundos; Tamanho do array: 512 elementos de 1 até: 1000
11 ←Tempo de Execução em Milisegundos; Tamanho do array: 1024 elementos de 1 até: 1000
24 ←Tempo de Execução em Milisegundos; Tamanho do array: 2048 elementos de 1 até: 1000
61 ←Tempo de Execução em Milisegundos; Tamanho do array: 4096 elementos de 1 até: 1000
253 ←Tempo de Execução em Milisegundos; Tamanho do array: 8192 elementos de 1 até: 1000
1061 ←Tempo de Execução em Milisegundos; Tamanho do array: 16384 elementos de 1 até: 1000
4316 ←Tempo de Execução em Milisegundos; Tamanho do array: 32768 elementos de 1 até: 1000
17319 ←Tempo de Execução em Milisegundos; Tamanho do array: 65536 elementos de 1 até: 1000
69253 ←Tempo de Execução em Milisegundos; Tamanho do array: 131072 elementos de 1 até: 1000
282126 ←Tempo de Execução em Milisegundos; Tamanho do array: 262144 elementos de 1 até: 1000
--------------------------------------------------------------------------------------------
_______________________________________________________________
			fim
